{"version":3,"sources":["base.css","base.scss","_variable/_variable.scss","_mixin/_mixin.scss"],"names":[],"mappings":"AAAA,0DAA0D;ACQ1D;EACC,aAAa;EACb,kBAAkB;EAClB,YCGyB;EDFzB,uBCEyB;EDDzB,uBCEyB;EDDzB,mBACY;EADZ,oBAEa;EAEb,gBACY;EADZ,6BCYoC;EDRpC,mBAAmB;EACnB,qDAA6C;EAA7C,6CAA6C;CA+B7C;;ADvCD,2DAA2D;ACP3D;EAmBE,sBCN2B;EDO3B,0BCP2B;EDQ3B,qDAA6C;EAA7C,6CAA6C;CAC7C;;ADRF,2DAA2D;ACd3D;EA0BE,sBCZ2B;EDa3B,0BCb2B;CDc3B;;ADRF,2DAA2D;ACpB3D;EAgCE,sBAAsB;EACtB,aAAa;CACb;;ADRF,2DAA2D;AC1B3D;EAsCE,eAAe;EACf,iBACW;EADX,kBAEY;EAFZ,mBAGa;EAEb,aAAa;CACb;;ADVF,2DAA2D;ACe3D;EACC,mBAAmB;EACnB,YAAY;CACZ;;ADZD,2DAA2D;ACgB3D;EAEE,gBACY;EADZ,iCCxCuC;ED4CvC,oBAAoB;EACpB,0BAA0B;EAC1B,mBAAmB;EACnB,iBAAiB;CA2BjB;;AD1CF,2DAA2D;ACM3D;EAaG,mBAAmB;EACnB,mBACY;EADZ,oBAEa;CAmBb;;ADlCH,2DAA2D;ACD3D;EAsBI,YAAY;EACZ,mBAAmB;EACnB,UAAU;EEpEZ,YFqE+B;EEpE/B,YFoEoC;EAClC,uBC5EsB;CD6EtB;;ADhBJ,2DAA2D;ACX3D;EA8BI,QAAQ;CACR;;ADfJ,2DAA2D;AChB3D;EAiCI,SAAS;CACT","file":"../base.css","sourcesContent":["/* line 9, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.btn {\n  height: 55px;\n  line-height: 55px;\n  color: #FFF;\n  border: 2px solid #FFF;\n  background-color: #000;\n  padding-left: 30px;\n  padding-right: 30px;\n  font-size: 18px;\n  font-family: \"museosansbold\";\n  text-align: center;\n  transition: background-color .2s ease-in-out;\n}\n\n/* line 27, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.btn:hover {\n  border-color: #008080;\n  background-color: #008080;\n  transition: background-color .2s ease-in-out;\n}\n\n/* line 34, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.btn:active {\n  border-color: #800080;\n  background-color: #800080;\n}\n\n/* line 40, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.btn_header {\n  display: inline-block;\n  width: 230px;\n}\n\n/* line 46, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.btn_only {\n  display: block;\n  margin-top: 30px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 530px;\n}\n\n/* line 59, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\nsection {\n  position: relative;\n  z-index: 10;\n}\n\n/* line 67, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.main__title {\n  font-size: 50px;\n  font-family: \"proximanova-black\";\n  letter-spacing: 3px;\n  text-transform: uppercase;\n  text-align: center;\n  line-height: 1.2;\n}\n\n/* line 78, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.main__title-text {\n  position: relative;\n  padding-left: 80px;\n  padding-right: 80px;\n}\n\n/* line 86, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.main__title-text:before, .main__title-text:after {\n  content: \"\";\n  position: absolute;\n  top: 27px;\n  width: 45px;\n  height: 1px;\n  background-color: #000;\n}\n\n/* line 95, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.main__title-text:before {\n  left: 0;\n}\n\n/* line 98, /Users/andrey/PROJECT/NSG/src/scss/base.scss */\n.main__title-text:after {\n  right: 0;\n}\n","///\n/// IMPORT FILES\n///\n@import \"./_mixin/mixin\";\n@import \"./_variable/variable\";\n///\n/// BTN\n///\n.btn {\n\theight: 55px;\n\tline-height: 55px;\n\tcolor: $c-white;\n\tborder: 2px solid $c-white;\n\tbackground-color: $c-black;\n\tpadding: {\n\t\tleft: 30px;\n\t\tright: 30px;\n\t};\n\tfont: {\n\t\tsize: 18px;\n\t\tfamily: $f-MS-bold;\n\t}\n\ttext-align: center;\n\ttransition: background-color .2s ease-in-out;\n\n\n\t&:hover {\n\t\tborder-color: $c-teal;\n\t\tbackground-color: $c-teal;\n\t\ttransition: background-color .2s ease-in-out;\n\t}\n\n\n\t&:active {\n\t\tborder-color: $c-purple;\n\t\tbackground-color: $c-purple;\n\t}\n\n\n\t&_header {\n\t\tdisplay: inline-block;\n\t\twidth: 230px;\n\t}\n\n\n\t&_only {\n\t\tdisplay: block;\n\t\tmargin: {\n\t\t\ttop: 30px;\n\t\t\tleft: auto;\n\t\t\tright: auto;\n\t\t}\n\t\twidth: 530px;\n\t}\n}\n///\n/// SECTION\n///\nsection {\n\tposition: relative;\n\tz-index: 10;\n}\n///\n/// MAIN [tilte]\n///\n.main {\n\t&__title {\n\t\tfont: {\n\t\t\tsize: 50px;\n\t\t\tfamily: $f-PN-black;\n\t\t};\n\t\tletter-spacing: 3px;\n\t\ttext-transform: uppercase;\n\t\ttext-align: center;\n\t\tline-height: 1.2;\n\n\n\t\t&-text {\n\t\t\tposition: relative;\n\t\t\tpadding: {\n\t\t\t\tleft: 80px;\n\t\t\t\tright: 80px;\n\t\t\t};\n\n\n\t\t\t&:before,\n\t\t\t&:after {\n\t\t\t\tcontent: \"\";\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 27px;\n\t\t\t\t@include mixinDimensions(45px, 1px);\n\t\t\t\tbackground-color: $c-black;\n\t\t\t}\n\n\t\t\t&:before {\n\t\t\t\tleft: 0;\n\t\t\t}\n\t\t\t&:after {\n\t\t\t\tright: 0;\n\t\t\t}\n\t\t}\n\t}\n}","@import \"../_function/function\";\n\n////\n/// @group  Variable\n////\n\n///\n/// @name   object\n///\n\n// Proxima Nova --> PN\n\n$object : (\n\tcolor : (\n\t\twhite             : #FFF,\n\t\tblack             : #000,\n\t\tnero              : #191919,\n\t\tdim-gray          : #666,\n\t\tgrey              : #808080,\n\t\taqua              : #00FFFF,\n\t\tmagenta           : #FF00FF,\n\t\tteal              : #008080,\n\t\tpurple            : #800080,\n\t),\n\n\tfonts : (\n\t\tPN-light          : \"proximanova-light\",\n\t\tPN-black          : \"proximanova-black\",\n\t\tPN-regular        : \"proximanova-reg\",\n\t\tPN-bold           : \"proximanova-bold\",\n\t\tMS-bold           : \"museosansbold\",\n\t),\n\n\tdimension : (\n\t\tall       : 100%\n\t),\n);\n\n$w-all                : return-value(dimension, all);\n\n$c-white              : return-value(color, white);\n$c-black              : return-value(color, black);\n$c-nero               : return-value(color, nero);\n$c-dim-gray           : return-value(color, dim-gray);\n$c-grey               : return-value(color, grey);\n$c-aqua               : return-value(color, aqua);\n$c-magenta            : return-value(color, magenta);\n$c-teal               : return-value(color, teal);\n$c-purple             : return-value(color, purple);\n\n$f-PN-light           : return-value(fonts, PN-light);\n$f-PN-black           : return-value(fonts, PN-black);\n$f-PN-regular         : return-value(fonts, PN-regular);\n$f-PN-bold            : return-value(fonts, PN-bold);\n$f-MS-bold            : return-value(fonts, MS-bold);","////\n/// @group  Mixin\n////\n\n/// \n/// Mixin setting the width and height element.\n///\n/// @name   mixinDimensions\n///\n/// @param  {String}  $width             - The width property sets the width of an element.\n/// @param  {String}  $height  [$width]  - The height property sets the height of an element.\n///\n/// @see    $object\n///\n/// @example\n///   <selector> {\n///     @include mixinDimensions(100%);\n///     @include mixinDimensions(100%, 50%);\n///   }\n///\n@mixin mixinDimensions($width, $height:$width) {\n  width : $width;\n  height: $height;\n}\n\n\n///\n/// Mixin generate animation. It uses an additional function :\n/// - **map-get()**   - returns the value in a map associated with the given key. If the map doesnâ€™t have such a key, returns null;\n/// - **map-merge()** - Merges two maps together into a new map. Keys in $map2 will take precedence over keys in $map1;\n///\n/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method       map-get()\n/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method     map-merge()\n///\n/// @name   mixinKeyframes\n///\n/// @param  {String}  $keyName - Animation Name\n/// @param  {Object}  $options\n///\n/// @example\n///   <selector> {\n///     @include moduleKeyframes(clockLeft,\n///       (\n///         opacityStart      : 0.8,\n///         opacityEnd        : 1,\n///         transformStart    : rotate(360deg)\n///       )\n///       ||\n///       (\n///         opacityStart      : 0.5,\n///         opacityEnd        : 1,\n///         transformDouble   : (rotate(-360deg) scale(0.5))\n///       )\n///     );\n///   }\n///\n@mixin mixinKeyframes($keyName, $options: ()) {\n  $configuration: map-merge((), $options);\n\n  @keyframes #{$keyName} {\n    from{\n      opacity   : map-get($configuration, opacityStart);\n      transform : map-get($configuration, transformStart);\n      transform : map-get($configuration, transformDouble);\n    }\n    to{\n      opacity   : map-get($configuration, opacityEnd);\n      transform : map-get($configuration, transformEnd);\n    }\n  }\n}\n\n///\n/// Mixin in mathematics, the gradient is a generalization of the usual concept of derivative of a function in one dimension to a function in several dimensions.\n///\n/// @name     mixinLinerGradient\n///\n/// @param    {Color}  $start_color  - Optional. The color of the shadow. Look at CSS Color Values for a complete list of possible color values;\n/// @param    {Color}  $end_color    - --//--\n///\n/// @link http://www.w3schools.com/cssref/css_colors_legal.asp  CSS Color Values\n///\n/// @see    $object\n///\n/// @example\n///   <selector> {\n///     @include mixinLinerGradient(#F00A1B, #FF0000);\n///     @include mixinLinerGradient($white, $black);\n///   }\n///\n@mixin mixinLinerGradient($start_color, $end_color){\n\tbackground: $start_color;\n\tbackground: -moz-linear-gradient(top,  rgba($start_color, 1) 0%, rgba($end_color, 1) 100%);\n\tbackground: -webkit-linear-gradient(top,  rgba($start_color, 1) 0%,rgba($end_color, 1) 100%);\n\tbackground: linear-gradient(to bottom,  rgba($start_color, 1) 0%,rgba($end_color, 1) 100%);\n\tfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start_color}', endColorstr='#{$end_color}',GradientType=0 );\n}\n\n\n///\n/// Centered elements\n///\n@mixin centered {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n}\n\n///\n/// Mixin media queries.\n///\n/// @name     respond-to\n///\n/// @param    {String}  $media [$text-mobile | $text-tablet | $text-small | $text-medium | $text-large] - Value that identifies one of the options and breakpoint.\n///\n/// @see      $object\n///\n/// @example\n///   <selector> {\n///     @include mixinRespond($text-mobile) { @content };\n///   }\n///   <selector> {\n///     @include mixinRespond($text-medium) { @content };\n///   }\n///\n//@mixin respond-to($media){\n//  @if ($media == 'extra-small') {\n//    @media screen and (max-width: 479px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'small'){\n//    @media screen and (min-width: 480px) and (max-width: 767px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'small-max') {\n//    @media screen and (max-width: 767px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'small-min') {\n//    @media screen and (min-width: 768px){\n//      @content\n//    }\n//  }\n//  @else if ($media == 'medium') {\n//    @media screen and (min-width: 768px) and (max-width: 991px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'medium-max') {\n//    @media screen and (max-width: 991px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'large-min') {\n//    @media screen and (min-width: 992px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'large') {\n//    @media screen and (min-width: 992px) and (max-width: 1199px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'large-max') {\n//    @media screen and (max-width: 1199px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'extra-large') {\n//    @media screen and (min-width: 1200px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'hard') {\n//    @media screen and (min-width: 992px) and (max-width: 1366px) {\n//      @content\n//    }\n//  }\n//  @else if ($media == 'hard-max') {\n//    @media screen and (max-width: 1366px) {\n//      @content\n//    }\n//  }\n//  @else if ($media != 'extra-small'  or $media != 'small' or\n//       $media != 'small-all'    or $media != 'medium' or\n//       $media != 'medium-all'   or $media != 'large' or\n//       $media != 'large-all'    or $media != 'extra-large') {\n//    @warn \"Unfortunately, no value could be retrieved from `#{$media}`. Please make sure it is defined...\";\n//  }\n//}\n\n\n$breakpoints: (\n\t'extra-small'   : \"(max-width: 479px)\",\n\n\t'small-max'     : \"(max-width: 767px)\",\n\t'small-min'     : \"(min-width: 300px)\",\n\t'small'         : \"(min-width: 480px) and (max-width: 767px)\",\n\n\t'medium-max'    : \"(max-width: 991px)\",\n\t'medium-min'    : \"(min-width: 768px)\",\n\t'medium'        : \"(min-width: 768px) and (max-width: 991px)\",\n\n\t'large-max'     : \"(max-width: 1199px)\",\n\t'large-min'     : \"(min-width: 992px)\",\n\t'large'         : \"(min-width: 992px) and (max-width: 1199px)\",\n\n\t'extra-large'   : \"(min-width: 1200px)\",\n\n\t'hard'          : \"(min-width: 992px) and (max-width: 1366px)\",\n\t'hard-max'      : \"(max-width: 1366px)\"\n) !default;\n\n@mixin respond-to($name) {\n\t// If the key exists in the map\n\t@if map-has-key($breakpoints, $name) {\n\t\t// Prints a media query based on the value\n\t\t@media screen and #{inspect(map-get($breakpoints, $name))} {\n\t\t\t@content;\n\t\t}\n\t}\n\t// If the key doesn't exist in the map\n\t@else {\n\t\t@warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.\";\n\t}\n}\n"]}